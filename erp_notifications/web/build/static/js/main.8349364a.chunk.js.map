{"version":3,"sources":["components/App.tsx","Notifications/Notification.tsx","utils/misc.ts","Notifications/NotificationProvider.tsx","hooks/useNuiEvent.ts","index.tsx"],"names":["App","Notification","props","useState","exit","setExit","useEffect","setTimeout","dispatch","type","id","persist","clearInterval","length","handleStartTimer","className","message","noop","NotificationProvider","useReducer","state","action","payload","filter","el","handler","savedHandler","useRef","current","eventListener","event","data","eventAction","window","addEventListener","removeEventListener","useNuiEvent","v4","map","note","children","ReactDOM","render","document","getElementById"],"mappings":"4LASeA,EANO,WACpB,OACE,yB,qBCkCWC,EArCM,SAACC,GAAgB,IAAD,EAEZC,oBAAS,GAFG,mBAE7BC,EAF6B,KAEvBC,EAFuB,KAgCpC,OAZAC,qBAAU,WACLF,GATJG,YAAW,WACVL,EAAMM,SAAS,CACdC,KAAM,sBACNC,GAAIR,EAAMQ,OAET,OAOD,CAACN,IAEJE,qBAAU,WACJJ,EAAMS,SAvBa,WACxB,IAAMD,EAAKH,YAAW,WACrBF,GAAQ,GACRO,cAAcF,KACZR,EAAMW,QAoBRC,KAEC,IAGF,sBAAKC,UAAS,uBAAkBb,EAAMO,KAAxB,YAAiCL,EAAO,UAAY,IAAlE,cAA4EF,EAAMc,QAAlF,QC9BWC,EAAO,a,QCsDLC,EA7Cc,SAAChB,GAAgB,IAAD,EAElBiB,sBAAW,SAACC,EAAOC,GAC5C,OAAOA,EAAOZ,MACb,IAAK,mBACJ,MAAM,GAAN,mBAAWW,GAAX,gBAAsBC,EAAOC,WAC9B,IAAK,sBACJ,OAAOF,EAAMG,QAAO,SAAAC,GAAE,OAAIA,EAAGd,KAAOW,EAAOX,MAC5C,QACC,OAAOU,KAEP,IAXyC,mBAErCA,EAFqC,KAE9BZ,EAF8B,KAiC5C,OCzB0B,SACzBa,EACAI,GAEA,IAAMC,EAAyDC,iBAAOV,GAGtEX,qBAAU,WACRoB,EAAaE,QAAUH,IACtB,CAACA,IAEJnB,qBAAU,WACR,IAAMuB,EAAgB,SAACC,GAA4C,IAAD,EAC1BA,EAAMC,KAA5BC,EADgD,EACxDX,OAAqBU,EADmC,EACnCA,KAEzBL,EAAaE,SACXI,IAAgBX,GAClBK,EAAaE,QAAQG,IAO3B,OAFAE,OAAOC,iBAAiB,UAAWL,GAE5B,kBAAMI,OAAOE,oBAAoB,UAAWN,MAClD,CAACR,IDpBLe,CAA2B,gBAAgB,SAACL,GACtB,QAAjBA,EAAKpB,QAOTH,EAAS,CACRC,KAAM,mBACNa,QAAS,CACRZ,GAAIqB,EAAKrB,IAAM2B,cACf5B,KAAMsB,EAAKtB,KACXO,QAASe,EAAKf,QACdH,OAAQkB,EAAKlB,OACbF,QAASoB,EAAKpB,UAAW,KAb1BH,EAAS,CACRC,KAAM,sBACNC,GAAIqB,EAAKrB,QAiBX,gCACC,qBAAKK,UAAU,yBAAf,SACEK,EAAMkB,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,aAAc/B,SAAUA,GAA4B+B,GAAbA,EAAK7B,SAGpDR,EAAMsC,aE/CVC,IAASC,OACP,cAAC,EAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8349364a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div></div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {useEffect, useState} from 'react';\r\n\r\nconst Notification = (props: any) => {\r\n\r\n\tconst [exit, setExit] = useState(false)\r\n\r\n\tconst handleStartTimer = () => {\r\n\t\tconst id = setTimeout(() => {\r\n\t\t\tsetExit(true)\r\n\t\t\tclearInterval(id)\r\n\t\t}, props.length)\r\n\t}\r\n \r\n\tconst handleCloseNotification = () => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tprops.dispatch({\r\n\t\t\t\ttype: \"REMOVE_NOTIFICATION\",\r\n\t\t\t\tid: props.id\r\n\t\t\t})\r\n\t\t}, 250)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (exit) {\r\n\t\t\thandleCloseNotification()\r\n\t\t}\r\n\t}, [exit])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!props.persist) {\r\n\t\t\thandleStartTimer()\r\n\t\t}\r\n\t}, [])\r\n \r\n\treturn(\r\n\t\t<div className={`notification ${props.type} ${ exit ? \"fadeOut\" : \"\" }`} > {props.message} </div>\r\n\t)\r\n}\r\n\r\nexport default Notification","// Will return whether the current environment is in a regular browser\r\n// and not CEF\r\nexport const isEnvBrowser = (): boolean => !(window as any).invokeNative\r\n\r\n// Basic no operation function\r\nexport const noop = () => {}","import React, {useReducer} from 'react';\r\nimport Notification from './Notification'\r\nimport {useNuiEvent} from \"../hooks/useNuiEvent\";\r\n\r\nimport {v4} from 'uuid'\r\n\r\ninterface INotification {\r\n\tid: string\r\n  type: string\r\n  message: string\r\n  length: number\r\n\tpersist: string\r\n}\r\n\r\nconst NotificationProvider = (props: any) => {\r\n\r\n\tconst [state, dispatch] = useReducer((state, action) => {\r\n\t\tswitch(action.type) {\r\n\t\t\tcase 'ADD_NOTIFICATION':\r\n\t\t\t\treturn [...state, {...action.payload}];\r\n\t\t\tcase 'REMOVE_NOTIFICATION':\r\n\t\t\t\treturn state.filter(el => el.id !== action.id);\r\n\t\t\tdefault:\r\n\t\t\t\treturn state;\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseNuiEvent<INotification>('notification', (data) => {\r\n\t\tif (data.persist === \"END\") {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"REMOVE_NOTIFICATION\",\r\n\t\t\t\tid: data.id\r\n\t\t\t})\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch({\r\n\t\t\ttype: \"ADD_NOTIFICATION\",\r\n\t\t\tpayload: {\r\n\t\t\t\tid: data.id || v4(),\r\n\t\t\t\ttype: data.type,\r\n\t\t\t\tmessage: data.message,\r\n\t\t\t\tlength: data.length,\r\n\t\t\t\tpersist: data.persist || false\r\n\t\t\t}\r\n\t\t})\t\t\r\n  \t})\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className=\"notification-container\">\r\n\t\t\t\t{state.map((note) => {\r\n\t\t\t\t\treturn <Notification dispatch={dispatch} key={note.id} {...note} />\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NotificationProvider","import {MutableRefObject, useEffect, useRef} from \"react\";\r\nimport {noop} from \"../utils/misc\";\r\n\r\ninterface NuiMessageData<T = unknown> {\r\n  action: string;\r\n  data: T;\r\n}\r\n\r\ntype NuiHandlerSignature<T> = (data: T) => void;\r\n\r\n/**\r\n * A hook that manage events listeners for receiving data from the client scripts\r\n * @param action The specific `action` that should be listened for.\r\n * @param handler The callback function that will handle data relayed by this hook\r\n *\r\n * @example\r\n * useNuiEvent<{visibility: true, wasVisible: 'something'}>('setVisible', (data) => {\r\n *   // whatever logic you want\r\n * })\r\n *\r\n **/\r\n\r\nexport const useNuiEvent = <T = any>(\r\n  action: string,\r\n  handler: (data: T) => void\r\n) => {\r\n  const savedHandler: MutableRefObject<NuiHandlerSignature<T>> = useRef(noop);\r\n\r\n  // When handler value changes set mutable ref to handler val\r\n  useEffect(() => {\r\n    savedHandler.current = handler;\r\n  }, [handler]);\r\n\r\n  useEffect(() => {\r\n    const eventListener = (event: MessageEvent<NuiMessageData<T>>) => {\r\n      const { action: eventAction, data } = event.data;\r\n\r\n      if (savedHandler.current) {\r\n        if (eventAction === action) {\r\n          savedHandler.current(data);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"message\", eventListener);\r\n    // Remove Event Listener on component cleanup\r\n    return () => window.removeEventListener(\"message\", eventListener);\r\n  }, [action]);\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nimport NotificationProvider from './Notifications/NotificationProvider'\r\n\r\nReactDOM.render(\r\n  <NotificationProvider>\r\n    <App /> \r\n  </NotificationProvider>,  \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}